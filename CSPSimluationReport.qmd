---
title: "RAND / UCLA Method (RAM) Simulations Report"
author: "Joshua J. Cook, M.S., ACRP-PM, CCRC, Achraf Cohen, Ph.D."
date: today
toc: TRUE
format: html
embed-resources: TRUE
editor: visual
---

```{r}

# Setup
library(tidyverse)
library(boot)
library(MASS)
library(DescTools)
library(reshape2)
library(ggridges)
```

# Median/IQR

## Functions

```{r}

# Function to simulate expert ratings
simulate_ratings <- function(num_experts, num_questions) {
  matrix(sample(1:9, num_experts * num_questions, replace = TRUE), 
         nrow = num_experts, ncol = num_questions)
}

adjust_ratings <- function(ratings) {
  apply(ratings, 2, function(x) {
    median_x <- median(x)
    IQR_x <- IQR(x)
    lower_bound <- median_x - IQR_x  
    upper_bound <- median_x + IQR_x  
    
    sapply(x, function(rating) {
      if (rating < lower_bound) {
        return(min(rating + sample(2:3, 1), 9))
      } else if (rating > upper_bound) {
        return(max(rating - sample(2:3, 1), 1))
      }
      # Apply a mild adjustment for ratings within the IQR bounds
      if (runif(1) > 0.5) {  # 50% chance to adjust ratings within IQR
        return(ifelse(rating < median_x, min(rating + 1, 9), max(rating - 1, 1)))
      }
      return(rating)
    })
  })
}


# Function to ensure ratings are within the 1-9 scale
validate_ratings <- function(ratings) {
  pmin(pmax(ratings, 1), 9)
}

# Function to calculate appropriateness scores
calculate_appropriateness <- function(ratings) {
  scores <- rowMeans(ratings, na.rm = TRUE)
  list(scores = scores)
}
```

## 1000 Iterations

```{r}

# Parameters
num_experts <- 9
num_questions <- 20
num_iterations <- 1000

# Initialize storage for medians
median_scores_round1 <- numeric(num_iterations)
median_scores_round2 <- numeric(num_iterations)

for (i in 1:num_iterations) {
  ratings_round1 <- simulate_ratings(num_experts, num_questions)
  ratings_round2 <- adjust_ratings(ratings_round1)
  ratings_round2 <- validate_ratings(ratings_round2)
  
  # Calculate appropriateness scores for both rounds
  results_round1 <- calculate_appropriateness(ratings_round1)
  results_round2 <- calculate_appropriateness(ratings_round2)
  
  # Store median appropriateness scores for each round
  median_scores_round1[i] <- median(results_round1$scores)
  median_scores_round2[i] <- median(results_round2$scores)
}
```

## EDA

```{r}

# Prepare data for visualization
df_medians <- data.frame(
  Round = factor(rep(c("Round 1", "Round 2"), each = num_iterations)),
  MedianScore = c(median_scores_round1, median_scores_round2)
)
```

```{r}

# Combine the median scores into a single data frame for plotting
df_medians <- data.frame(
  Score = c(median_scores_round1, median_scores_round2),
  Round = factor(rep(c("Round 1", "Round 2"), each = length(median_scores_round1)))
)

# Generate the ridge plot
ggplot(df_medians, aes(x = Score, y = Round, fill = Round)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_manual(values = c("Round 1" = "skyblue", "Round 2" = "darkred")) +
  labs(title = "Distribution of Median Appropriateness Scores Across Rounds",
       x = "Median Appropriateness Score (k=1000)", y = "") +
  theme_ridges() +
  theme(legend.position = "none")
```

# Mode/Range

## Functions

```{r}

simulate_ratings <- function(num_experts, num_questions) {
  matrix(sample(1:9, num_experts * num_questions, replace = TRUE), 
         nrow = num_experts, ncol = num_questions)
}

calculate_modes <- function(x) {
  ux <- unique(round(x))  # Ensure values are rounded to integers
  tab <- tabulate(match(round(x), ux))
  modes <- ux[tab == max(tab)]
  return(modes)
}

adjust_ratings <- function(ratings) {
  apply(ratings, 2, function(x) {
    modes_x <- calculate_modes(x)
    range_x <- range(x)
    
    # If multimodal, select one mode randomly
    selected_mode <- sample(modes_x, 1)
    
    sapply(x, function(rating) {
      if (!is.na(rating) && rating != selected_mode) {
        adjustment_direction <- sign(selected_mode - rating)
        adjustment_amount <- if(diff(range_x) > 0) {
          runif(1, min = 1, max = abs(selected_mode - rating) / diff(range_x) * 3)
        } else {
          1  
        }
        new_rating <- rating + adjustment_direction * adjustment_amount
        return(min(max(new_rating, 1), 9))
      }
      return(rating)
    })
  })
}

adjust_ratings_towards_mode <- function(ratings, true_modes) {
  apply(ratings, 2, function(x, mode) {
    if (length(mode) > 0) {  
      selected_mode <- sample(mode, 1)
      x <- ifelse(x < selected_mode, x + runif(length(x), min = 0.5, max = 1.5), x)
      x <- ifelse(x > selected_mode, x - runif(length(x), min = 0.5, max = 1.5), x)
    }
    pmin(pmax(round(x), 1), 9)  # Round and clamp
  }, mode = true_modes)
}

simulate_ratings_based_on_modes <- function(true_modes, num_experts, variability = 1) {
  ratings <- sapply(true_modes, function(mode) {
    rnorm(num_experts, mean = mode, sd = variability)  # Generate ratings with SLIGHT variability around the mode
  })
  return(pmin(pmax(round(ratings), 1), 9))  # Ensure ratings are integers within 1-9
}

validate_ratings <- function(ratings) {
  pmin(pmax(ratings, 1), 9)
}
```

## 1000 Iterations

```{r}

num_experts <- 9
num_questions <- 20
num_iterations <- 1000

true_modes <- sample(1:9, num_questions, replace = TRUE)  # "True" modes for each question

modes_scores_round1 <- list()
modes_scores_round2 <- list()

for (i in 1:num_iterations) {
  ratings_round1 <- simulate_ratings_based_on_modes(true_modes, num_experts)
  ratings_round2 <- adjust_ratings_towards_mode(ratings_round1, true_modes)
  
  # Ensure no NAs and values are within range
  ratings_round2 <- ifelse(is.na(ratings_round2), round(mean(true_modes)), ratings_round2)
  ratings_round2 <- pmin(pmax(ratings_round2, 1), 9)
  
  # Capture modes for both rounds
  modes_round1 <- apply(ratings_round1, 2, calculate_modes)
  modes_round2 <- apply(ratings_round2, 2, calculate_modes)
  
  # Store the flattened modes for each round
  modes_scores_round1[[i]] <- unlist(modes_round1)
  modes_scores_round2[[i]] <- unlist(modes_round2)
}
```

## EDA

```{r}
all_modes_round1 <- unlist(modes_scores_round1)
all_modes_round2 <- unlist(modes_scores_round2)
round_identifiers <- rep(c("Round 1", "Round 2"), times = c(length(all_modes_round1), length(all_modes_round2)))

df_modes <- data.frame(
  Score = c(all_modes_round1, all_modes_round2),
  Round = factor(round_identifiers)
)

ggplot(df_modes, aes(x = Score, y = Round, fill = Round)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_manual(values = c("Round 1" = "skyblue", "Round 2" = "darkred")) +
  labs(title = "Distribution of Modal Appropriateness Scores Across Rounds",
       x = "Modal Appropriateness Score (k=1000)", y = "") +
  theme_ridges() +
  theme(legend.position = "none")
```

# Mode/Range (Adjusted)

## Functions

```{r}

num_experts <- 9
num_questions <- 20
num_iterations <- 1000

set.seed(123)

true_modes <- sample(1:9, num_questions, replace = TRUE)  # True modes for each question

simulate_ratings_based_on_modes <- function(true_modes, num_experts, variability = 1) {
  ratings <- sapply(true_modes, function(mode) {
    rnorm(num_experts, mean = mode, sd = variability)  # Generate ratings with SLIGHT variability around the mode
  })
  return(pmin(pmax(round(ratings), 1), 9))  # Ensure ratings are integers within 1-9
}

adjust_ratings_towards_mode <- function(ratings, true_modes) {
  apply(ratings, 2, function(x, mode) {
    selected_mode <- sample(mode, 1)  # In case of multiple modes, select one randomly
    x + sample(c(-1, 0, 1), length(x), replace = TRUE, prob = c(0.25, 0.5, 0.25))  # Slight random adjustments towards the mode
  }, mode = true_modes)
}

calculate_modes <- function(x) {
  ux <- unique(x)
  tab <- tabulate(match(x, ux))
  modes <- ux[tab == max(tab)]
  return(modes)
}
```

## 1000 Iterations

```{r}

modes_scores_round1 <- list()
modes_scores_round2 <- list()

for (i in 1:num_iterations) {
  # Simulate initial ratings based on true modes
  ratings_round1 <- simulate_ratings_based_on_modes(true_modes, num_experts)
  
  # Adjust ratings for Round 2 towards the true modes
  ratings_round2 <- adjust_ratings_towards_mode(ratings_round1, true_modes)
  ratings_round2 <- pmin(pmax(ratings_round2, 1), 9)  # Ensure ratings are within 1-9
  
  # Capture modes for both rounds
  modes_round1 <- apply(ratings_round1, 2, calculate_modes)
  modes_round2 <- apply(ratings_round2, 2, calculate_modes)
  
  # Store the flattened modes
  modes_scores_round1[[i]] <- unlist(modes_round1)
  modes_scores_round2[[i]] <- unlist(modes_round2)
}
```

## EDA

```{r}

all_modes_round1 <- unlist(modes_scores_round1)
all_modes_round2 <- unlist(modes_scores_round2)
round_identifiers <- rep(c("Round 1", "Round 2"), times = c(length(all_modes_round1), length(all_modes_round2)))

df_modes <- data.frame(
  Score = c(all_modes_round1, all_modes_round2),
  Round = factor(round_identifiers)
)


ggplot(df_modes, aes(x = Score, y = Round, fill = Round)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_manual(values = c("Round 1" = "skyblue", "Round 2" = "darkred")) +
  labs(title = "Distribution of Modal Appropriateness Scores Across Rounds",
       x = "Modal Appropriateness Score Adj. (k=1000)", y = "") +
  theme_ridges() +
  theme(legend.position = "none") +
  scale_discrete_manual(aes(breaks = "1, 2, 3, 4, 5, 6, 7, 8, 9"))
```
